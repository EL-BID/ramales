# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SanibidRamales
                                 A QGIS plugin
 sanibid.org
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-24
        git sha              : $Format:%H$
        copyright            : (C) 2021 by BID - SaniBID
        email                : info@sanibid.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsProject
# Initialize Qt resources from file resources.py
from .views.ui.resources import *
from . import resources
# Import the code for the dialog
from .views.sanibid_ramales_dialog import SanibidRamalesDialog
from .views.layers_panel_dialog import LayersPanelDialog
from .views.LoginView import LoginViewDialog
from .views.publish_dialog import PublishDialog
from .views.ImportSurveysView import ImportSurveysDialog
from .helpers.project import Project, BLOCKS_LAYER_NAME, NODES_LAYER_NAME
from .helpers.api import get_surveys, get_survey_data, send_data
from .helpers.utils import setComboItem


class SanibidRamales:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SanibidRamales_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SanibidRamales')
        self.toolbar = self.iface.addToolBar(u'&SanibidRamales')
        self.toolbar.setObjectName(u'&SanibidRamales')

        # Project Helper
        self.proj = Project(self.iface)        
        
        #dialogs
        self.loginDialog = LoginViewDialog()
        self.publisDialog = PublishDialog()
        self.publisDialog.accepted.connect(self.publishData)
        self.loginDialog.accepted.connect(self.loadSurveys)
        self.surveysDialog = ImportSurveysDialog()
        self.surveysDialog.reloadButton.clicked.connect(self.reloadSurveyData)
        self.surveysDialog.accepted.connect(self.getSurveyData)        

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.proj.instance().layersAdded.connect( self.startEditHandlers )            

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SanibidRamales', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)
        
        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sanibid_ramales/icons/'
        self.add_action(
            icon_path + 'settings.png',
            text=self.tr(u'Sanibid Ramales: Ajustes'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path + 'import.png',
            text=self.tr(u'Sanibid Ramales: Import'),
            callback=self.importData,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path + 'export.png',
            text=self.tr(u'Sanibid Ramales: Publish'),
            callback=self.publisDialog.show,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SanibidRamales'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def showLogin(self):        
        self.loginDialog.show()

    def showSurveys(self):
        self.loginDialog.hide()
        self.surveysDialog.show()     

    def loadSurveys(self):
        """ Shows authorized surveys to import """

        if self.surveysDialog.hasRows():
            self.showSurveys()
        else:
            user = self.loginDialog.userText.text()
            password = self.loginDialog.passText.text()
            if user != "" and password != "":
                surveys = get_surveys(user=user, password=password)
                #self.loginDialog.passText.setText("")
                if surveys:
                    if surveys['success']:
                        self.surveysDialog.populateSurveys(surveys['data'])
                        self.showSurveys()
                    else:
                        self.proj.showError("Not able to get remote data: {}".format(surveys['msg']))
                        self.loginDialog.passText.setText("")
                else:
                    self.loginDialog.passText.setText("")
                    self.proj.showError("Unhandled error: api response error")
            else:
                self.showLogin()
        
            

    def reloadSurveyData(self):
        self.surveysDialog.clearAll()
        self.surveysDialog.hide()
        self.loadSurveys()

    def getSurveyData(self):        
        user = self.loginDialog.userText.text()
        password = self.loginDialog.passText.text()
        if user != "" and password != "":
            id = self.surveysDialog.getIdFromRow()
            if id:
                self.proj.setValue('CURRENT_SURVEY_ID', id)
                data = get_survey_data(id, user, password)
                if data:
                    if data['success']:
                        self.proj.populateNodesLayer(data['data'])
                        self.proj.showMessage("Data loaded to layer")                        
                    else:
                        self.proj.showError("no hay data")
                    self.loginDialog.passText.setText("")
            else:
                self.proj.showError("no hay id")                   
        else:
            self.proj.showError("Esto no deberia pasar")
        
    def importData(self):
        """ Shows confirmation dialog to import data """

        if self.proj.hasNodesLayer():
            target = self.proj.getValue(NODES_LAYER_NAME)
            if (QMessageBox.question(self.surveysDialog,
                "Import data",
                "This action will insert the points from the survey to the node layer (<b>{}</b>), do you want to continue?".format(target),
                QMessageBox.Yes|QMessageBox.No) == QMessageBox.No):                
                return
            self.loadSurveys()                 
        else:
            self.proj.showError("No existe la capa de NODOS")

    def publishData(self):
        """ Sends data to dashboard """

        user = self.publisDialog.usernameText.text()
        password = self.publisDialog.passwordText.text()
        if user != "" and password != "":
            #TODO: run nodes verifications before
            data = self.proj.layersToJson()
            if data:    
                survey_id = self.proj.getValue('CURRENT_SURVEY_ID')
                if survey_id is not None:                    
                    response = send_data(survey_id, user, password, data)
                    if response and response['success']:
                        self.proj.showMessage(response['message'])
                    else:
                        self.proj.showError(response['message'])           
                else:
                    self.proj.showError("CURRENT_SURVEY_ID not found")               
            else:
                self.proj.showError("Not able to get data from layers")                   
        else:
            self.publisDialog.show()

    def run(self):
        """Run method that performs all the real work"""
        layers = QgsProject.instance().layerTreeRoot().children()
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = LayersPanelDialog()                    

        blocks = self.dlg.selectBlocksLayerComboBox
        nodes = self.dlg.selectNodesLayerComboBox
        blocks.clear()
        nodes.clear()
        blocks.addItems([layer.name() for layer in layers])
        nodes.addItems([layer.name() for layer in layers])

        setComboItem(blocks, self.proj.getValue(BLOCKS_LAYER_NAME))
        setComboItem(nodes, self.proj.getValue(NODES_LAYER_NAME))

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()
        if result:
            if self.dlg.newLayerRadioButton.isChecked():
                newBlocksLayer = self.dlg.blocksLayerNameEdit.text()
                newNodesLayer = self.dlg.nodesLayerNameEdit.text()

                if newNodesLayer == "" and newBlocksLayer == "":
                    self.proj.showError(
                        "Al menos una capa no tiene que estar vacia")
                    return False

                if newBlocksLayer == self.proj.getValue(BLOCKS_LAYER_NAME) or newNodesLayer == self.proj.getValue(NODES_LAYER_NAME):
                    self.proj.showError(
                        "ya existe una capa con el mismo nombre")
                    return False        
                
                #create layers
                self.proj.createBlocksLayer(newBlocksLayer)
                self.proj.createNodesLayer(newNodesLayer)
                #assign layers
                self.proj.setBlocksLayer(newBlocksLayer)
                self.proj.setNodesLayer(newNodesLayer)
                #reset dialog
                self.dlg.blocksLayerNameEdit.setText("")
                self.dlg.nodesLayerNameEdit.setText("")
                self.dlg.existingLayerRadioButton.setChecked(True)

                self.proj.showMessage("las capas fueron creadas exitosamente")

            else:

                oldBlocksName = self.proj.getValue(BLOCKS_LAYER_NAME)
                oldNodesName = self.proj.getValue(NODES_LAYER_NAME)
                newBlocksName = self.dlg.selectBlocksLayerComboBox.currentText()
                newNodesName = self.dlg.selectNodesLayerComboBox.currentText()

                if oldBlocksName != newBlocksName:
                    self.proj.setBlocksLayer(newBlocksName)
                    
                if oldNodesName != newNodesName:
                    self.proj.setNodesLayer(newNodesName)
                    
 
    def startEditHandlers(self, layers=None):
        
        #if we are adding new layer to project
        if layers:             
            for layer in layers:
                if layer.name() == self.proj.getValue(NODES_LAYER_NAME):
                    self.proj.setNodesLayer(layer.name())
                    
                if layer.name() == self.proj.getValue(BLOCKS_LAYER_NAME):                    
                    self.proj.setBlocksLayer(layer.name())
            return True
                          